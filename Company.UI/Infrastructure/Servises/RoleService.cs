using Aplication.Services;
using AutoMapper;
using Domen.AutoGenerated;
using Domen.EmtityDTO.ProjectDto;
using Domen.EmtityDTO.RoleDto;
using Infrastructure.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Servises
{
    public class RoleService : IRoleService
    {
        private readonly IRoleRepository _roleRepository;
        private readonly IMapper _mapper;

        public RoleService(IRoleRepository roleRepository, IMapper mapper)
        {
            _roleRepository = roleRepository;
            _mapper = mapper;
        }

        public async Task<RoleGetDto> CreateRoleAsync(RoleCreateDto roleCreateDto)
        {
            var role = _mapper.Map<Role>(roleCreateDto);
            var roleEntity = await _roleRepository.CreateAsync(role);
            return _mapper.Map<RoleGetDto>(roleEntity);
        }

        public async Task<bool> DeleteRoleAsync(int Id)
        {
            return await _roleRepository.DeleteAsync(Id);
        }

        public async Task<List<RoleGetDto>> GetAllRoleAsync()
        {
         var role =   await _roleRepository.GetAllAsync();
            return _mapper.Map < List<RoleGetDto> >(role);
        }

        public async Task<RoleGetDto> GetByIdRoleAsync(int Id)
        {
           var role = await _roleRepository.GetByIdAsync(Id);
            return role != null ? _mapper.Map<RoleGetDto>(role) : null;
        }

        public async Task<RoleGetDto> UpdateRoleAsync(RoleUpdateDto roleUpdate)
        {
            var role = _mapper.Map<Role>(roleUpdate);
            await _roleRepository.UpdateAsync(role);
            return _mapper.Map<RoleGetDto>(role);
        }
    }
}
