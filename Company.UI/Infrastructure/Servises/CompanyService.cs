using Aplication.Services;
using Domen.AutoGenerated;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Servises
{
    public class CompanyService : ICompanyService
    {
        private readonly ConpanyDbContext _conpanyDbContext;

        public CompanyService(ConpanyDbContext conpanyDbContext)
        {
            _conpanyDbContext = conpanyDbContext;
        }

        public async   Task<Employee> CreateEmployeeAynce(Employee employee)
        {
                _conpanyDbContext.Employees.Add(employee);
                await _conpanyDbContext.SaveChangesAsync();
                return employee;
            
        }

        public async Task<Organization> CreateOrganizationAynce(Organization organization)
        {
            _conpanyDbContext.Organizations.Add(organization);
            await _conpanyDbContext.SaveChangesAsync();
            return organization;
        }

        public async Task<Project> CreateProjectAynce(Project project)
        {
            _conpanyDbContext.Projects.Add(project);
            await _conpanyDbContext.SaveChangesAsync();
            return project;
        }

        public async Task<Role> CreateRoleAynce(Role role)
        {
            _conpanyDbContext.Roles.Add(role);
            await _conpanyDbContext.SaveChangesAsync();
            return role;
        }

        public async Task<Domen.AutoGenerated.Task> CreateTaskAynce(Domen.AutoGenerated.Task task)
        {
            _conpanyDbContext.Tasks.Add(task);
            await _conpanyDbContext.SaveChangesAsync();
            return task;
        }

        public async Task<User> CreateUserAynce(User user)
        {
            _conpanyDbContext.Users.Add(user);
            await _conpanyDbContext.SaveChangesAsync();
            return user;
        }

        public async Task<bool> DeleteEmployeeAsync(int id)
        {
            var employee = await _conpanyDbContext.Employees.FindAsync(id);
            if (employee == null)
                return false;

            _conpanyDbContext.Employees.Remove(employee);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteOrganizationAynce(int Id)
        {
           var organization = await _conpanyDbContext.Organizations.FindAsync(Id);
            if (organization == null) 
                return false;

            _conpanyDbContext.Organizations.Remove(organization);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteProjectAynce(int Id)
        {
            var project = await _conpanyDbContext.Projects.FindAsync(Id);
            if (project == null)
                return false;
            

            _conpanyDbContext.Projects.Remove(project);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
           
        }

        public async Task<bool> DeleteRoleAynce(int Id)
        {
          var role = await _conpanyDbContext.Roles.FindAsync(Id);
            if (role == null )
                return false;

            _conpanyDbContext.Roles.Remove(role);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteTaskAynce(int Id)
        {
            var task = await _conpanyDbContext.Tasks.FindAsync(Id);
            if(task == null)
                return false;

            _conpanyDbContext.Tasks.Remove(task);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteUserAynce(int Id)
        {
            var user = await _conpanyDbContext.Users.FindAsync(Id);
            if (user == null) 
                return false;


            _conpanyDbContext.Users.Remove(user);
            await  _conpanyDbContext.SaveChangesAsync();
            return true;

        }

        public async  Task<List<Employee>> GetAllEmployeeAynce()
        {
            return await _conpanyDbContext.Employees.ToListAsync();
        }

        public async Task<List<Organization>> GetAllOrganizationAynce()
        {
            return await _conpanyDbContext.Organizations.ToListAsync();
        }

        public async Task<List<Project>> GetAllProjectAynce()
        {
            return await _conpanyDbContext.Projects.ToListAsync();
        }

        public async Task<List<Role>> GetAllRoleAynce()
        {
            return await _conpanyDbContext.Roles.ToListAsync();
        }

        public Task<List<Domen.AutoGenerated.Task>> GetAllTaskAynce()
        {
            throw new NotImplementedException();
        }

        public Task<List<User>> GetAllUserAynce()
        {
            throw new NotImplementedException();
        }

        public Task<Employee> GetByIdEmployee(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<Organization> GetByIdOrganizationAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<Project> GetByIdProjectAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<Role> GetByIdRoleAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<Domen.AutoGenerated.Task> GetByIdTaskAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<User> GetByIdUserAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<Employee> UpdateEmployeeAynce(Employee employee)
        {
            throw new NotImplementedException();
        }

        public Task<Organization> UpdateOrganizationAynce(Organization organization)
        {
            throw new NotImplementedException();
        }

        public Task<Project> UpdateProjectAynce(Project project)
        {
            throw new NotImplementedException();
        }

        public Task<Role> UpdateRoleAynce(Role role)
        {
            throw new NotImplementedException();
        }

        public Task<Domen.AutoGenerated.Task> UpdateTaskAynce(Domen.AutoGenerated.Task task)
        {
            throw new NotImplementedException();
        }

        public Task<User> UpdateUserAynce(User user)
        {
            throw new NotImplementedException();
        }

        Task<bool> ICompanyService.DeleteEmployeeAynce(int Id)
        {
            throw new NotImplementedException();
        }

        Task<bool> ICompanyService.DeleteOrganizationAynce(int Id)
        {
            throw new NotImplementedException();
        }
    }
}
