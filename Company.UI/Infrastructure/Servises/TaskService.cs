using Aplication.Services;
using AutoMapper;
using Domen.AutoGenerated;
using Task = Domen.AutoGenerated.Task;
using Domen.EmtityDTO.RoleDto;
using Domen.EmtityDTO.TaskDto;
using Infrastructure.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Servises
{
    public class TaskService : ITaskService
    {
        private readonly ITaskRepository _taskRepository;
        private readonly IMapper _mapper;
        public TaskService(ITaskRepository taskRepository, IMapper mapper)
        {
            _taskRepository = taskRepository;
            _mapper = mapper;
        }

        public async Task<TaskGetDto> CreateTaskAynce(TaskCreateDto taskCreate)
        {
            return null;
          /*  var task = _mapper.Map<Task>(taskCreate);
            var taskEntity = await _taskRepository.CreateAsync(task);
            return _mapper.Map<TaskGetDto>(taskEntity);*/
        }

        public Task<bool> DeleteTaskAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<List<TaskGetDto>> GetAllTaskAynce()
        {
            throw new NotImplementedException();
        }

        public Task<TaskGetDto> GetByIdTaskAynce(int Id)
        {
            throw new NotImplementedException();
        }

        public Task<TaskGetDto> UpdateTaskAynce(TaskUpdateDto task)
        {
            throw new NotImplementedException();
        }
    }
}
