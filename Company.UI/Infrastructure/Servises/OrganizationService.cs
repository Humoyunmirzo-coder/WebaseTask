using Aplication.Services;
using AutoMapper;
using Domen.AutoGenerated;
using Domen.EmtityDTO.EmployeeDto;
using Domen.EmtityDTO.OrganizationDto;
using Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Servises
{
    public class OrganizationService : IOrganizationService
    {
        private readonly ConpanyDbContext _conpanyDbContext;
        private readonly IOrganizationRepasitory _organizationRepasitory;
        private readonly IMapper _mapper;

        public OrganizationService(IOrganizationRepasitory organizationRepasitory, IMapper mapper, ConpanyDbContext conpanyDbContext)
        {
            _organizationRepasitory = organizationRepasitory;
            _mapper = mapper;
            _conpanyDbContext = conpanyDbContext;
        }
        public async Task<OrganizationGetDto> CreateOrganizationAsync(OrganizationCreateDto organization)
        {
            var OrganizationEntity = _mapper.Map<Organization>(organization);
            var createdOrganization = await _organizationRepasitory.CreateAsync(OrganizationEntity);
            return _mapper.Map<OrganizationGetDto>(createdOrganization);
        }


        public async Task<bool> DeleteOrganizationAsync(int Id)
        {
            Organization? entity = await _conpanyDbContext.Organizations.FindAsync(Id);
            if (entity == null)
                return false;

            _conpanyDbContext.Remove(entity);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<List<OrganizationGetDto>> GetAllOrganizationAsync()
        {
            var organizations = await _organizationRepasitory.GetAllAsync();
            return _mapper.Map<List<OrganizationGetDto>>(organizations);
        }

        public async Task<OrganizationGetDto> GetByIdOrganizationAsync(int Id)
        {
            var organizations =  await _organizationRepasitory.GetByIdAsync(Id);
            return organizations != null?  _mapper.Map<OrganizationGetDto> (organizations):null;
        }

        public async Task<OrganizationGetDto> UpdateOrganizationAsync(OrganizationUpdateDto organization)
        {
            var organizationEntity =  _mapper.Map<Organization>(organization);
            await _organizationRepasitory.UpdateAsync(organizationEntity);
            return _mapper.Map<OrganizationGetDto>(organizationEntity);
        }
    }
}
