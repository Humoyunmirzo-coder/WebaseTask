using Aplication.Services.UserServices;
using AutoMapper;
using Domen.AutoGenerated;
using Domen.EmtityDTO.UserDto;
using Infrastructure;
using Infrastructure.Repositories;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace Aplication.Servises
{
    public class UserService : IUserService
    {
        private readonly ConpanyDbContext _conpanyDbContext;
        private readonly IUserRepository _userRepository;
        private readonly IMapper _mapper;

        public UserService(IUserRepository userRepository, IMapper mapper, ConpanyDbContext conpanyDbContext)
        {
            _userRepository = userRepository;
            _mapper = mapper;
            _conpanyDbContext = conpanyDbContext;
        }


        public async Task<User> GetUserByUsernameAndPasswordAsync(string username, string password)
        {
            var user = await _conpanyDbContext.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (user == null)
            {
                return null; // User not found
            }

            // Verify the password by hashing the provided password and comparing it with the hashed password stored in the database
            var passwordHasher = new PasswordHasher<User>();
            var passwordVerificationResult = passwordHasher.VerifyHashedPassword(user, user.Passwordhash, password);
            if (passwordVerificationResult != PasswordVerificationResult.Success)
            {
                return null; // Password incorrect
            }

            return user; // User found and password correct
        }


        public async Task<UserGetDto> CreateUserAynce(UserCreateDto userDto)
        {

            var userentity = _mapper.Map<User>(userDto);
            userentity.Passwordhash = new PasswordHasher<User>().HashPassword(userentity, userDto.Password);

            var createUser = await _userRepository.CreateAsync(userentity);
            return _mapper.Map<UserGetDto>(createUser);
        }

        public async Task<bool> DeleteUserAynce(int Id)
        {
            User? entity = await _conpanyDbContext.Users.FindAsync(Id);
            if (entity == null)
                return false;

            _conpanyDbContext.Remove(entity);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public string GenerateJwtToken(string userName)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes("KeY1122"); // Use the same secret key as in your authentication setup
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                new(ClaimTypes.Name, userName)
                }),
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        public async Task<List<UserGetDto>> GetAllUserAynce()
        {
            var users = await _userRepository.GetAllAsync();
            return _mapper.Map<List<UserGetDto>>(users);
        }

        public async Task<UserGetDto> GetByIdUserAynce(int Id)
        {
            var user = await _userRepository.GetByIdAsync(Id);
            return user != null ? _mapper.Map<UserGetDto>(user) : null;
        }



        public async Task<UserGetDto> UpdateUserAynce(UserUpdateDto userUpdate)
        {
            var entity = await _userRepository.GetByIdAsync(userUpdate.Id);
            if (entity == null)
            {
                throw new KeyNotFoundException("User not found.");
            }
            entity.Username = userUpdate.Username ?? entity.Username;
            var hasher = new PasswordHasher<User>();
            var result = hasher.VerifyHashedPassword(entity, entity.Passwordhash, userUpdate.Oldpassword);
            if (result != PasswordVerificationResult.Success)
            {
                throw new ArgumentException("Invalid old password.", nameof(userUpdate.Oldpassword));
            }
            entity.Passwordhash = hasher.HashPassword(entity, userUpdate.Password);
            await _userRepository.UpdateAsync(entity);
            return _mapper.Map<UserGetDto>(entity);
        }

    }
}
