using Aplication.Services;
using Aplication.Services.Token;
using Aplication.Services.UserServices;
using AutoMapper;
using Domen.AutoGenerated;
using Domen.EmtityDTO.EmployeeDto;
using Domen.EmtityDTO.Token;
using Domen.EmtityDTO.UserDto;
using Infrastructure;
using Infrastructure.Repositories;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Nest;
using OfficeOpenXml;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Task = System.Threading.Tasks.Task;

namespace Aplication.Servises
{
    public class UserService : IUserService
    {
        private readonly ConpanyDbContext _conpanyDbContext;
        private readonly IUserRepository _userRepository;
        private readonly IMapper _mapper;
        private readonly IJwtTokenService _jwtTokenService;

        public UserService(IUserRepository userRepository, IMapper mapper, ConpanyDbContext conpanyDbContext, IJwtTokenService jwtTokenService)
        {
            _userRepository = userRepository;
            _mapper = mapper;
            _conpanyDbContext = conpanyDbContext;
            _jwtTokenService = jwtTokenService;
        }

        public async Task<User?> RegisterAsync(UserCreateDto createUser)
        {

            var user = new User()
            {
                Username = createUser.Username,
                Email = createUser.Email,
                Address = createUser.Address,
                Passwordhash = createUser.Password,
                Fullname = createUser.Fullname,


            };

            user.Passwordhash = new PasswordHasher<User>().HashPassword(user, createUser.Password);

            _conpanyDbContext.Users.Add(user);
            await _conpanyDbContext.SaveChangesAsync();

            return user;
        }

        public async Task<string> LoginAsync(LoginDto loginUserModel)
        {

            var user = await _conpanyDbContext.Users.FirstOrDefaultAsync(u => u.Username == loginUserModel.UserName);
            if (user == null)
            {
                throw new Exception("User null");
            }

            var result = new PasswordHasher<User>().VerifyHashedPassword(user, user.Passwordhash, loginUserModel.Password);

            if (result != PasswordVerificationResult.Success)
            {
                throw new Exception("parol muvaffaqiyatsiz heshlandi");
            }

            var token = _jwtTokenService.GenerateToken(user);

            return token;
        }


        public async Task<User> GetUserByUsernameAndPasswordAsync(string username, string password)
        {
            var user = await _conpanyDbContext.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (user == null)
            {
                return null; // User not found
            }

            // Verify the password by hashing the provided password and comparing it with the hashed password stored in the database
            var passwordHasher = new PasswordHasher<User>();
            var passwordVerificationResult = passwordHasher.VerifyHashedPassword(user, user.Passwordhash, password);
            if (passwordVerificationResult != PasswordVerificationResult.Success)
            {
                return null; // Password incorrect
            }

            return user; // User found and password correct
        }


        public async Task<UserGetDto> CreateUserAynce(UserCreateDto userDto)
        {

            var userentity = _mapper.Map<User>(userDto);
            userentity.Passwordhash = new PasswordHasher<User>().HashPassword(userentity, userDto.Password);

            var createUser = await _userRepository.CreateAsync(userentity);
            return _mapper.Map<UserGetDto>(createUser);
        }

        public async Task<bool> DeleteUserAynce(int Id)
        {
            User? entity = await _conpanyDbContext.Users.FindAsync(Id);
            if (entity == null)
                return false;

            _conpanyDbContext.Remove(entity);
            await _conpanyDbContext.SaveChangesAsync();
            return true;
        }

        public async Task<List<UserGetDto>> GetAllUserAynce()
        {
            var users = await _userRepository.GetAllAsync();
            return _mapper.Map<List<UserGetDto>>(users);
        }

        public async Task<UserGetDto> GetByIdUserAynce(int Id)
        {
            var user = await _userRepository.GetByIdAsync(Id);
            return user != null ? _mapper.Map<UserGetDto>(user) : null;
        }



        public async Task<UserGetDto> UpdateUserAynce(UserUpdateDto userUpdate)
        {
            var entity = await _userRepository.GetByIdAsync(userUpdate.Id);
            if (entity == null)
            {
                throw new KeyNotFoundException("User not found.");
            }
            entity.Username = userUpdate.Username ?? entity.Username;
            var hasher = new PasswordHasher<User>();
            var result = hasher.VerifyHashedPassword(entity, entity.Passwordhash, userUpdate.Oldpassword);
            if (result != PasswordVerificationResult.Success)
            {
                throw new ArgumentException("Invalid old password.", nameof(userUpdate.Oldpassword));
            }
            entity.Passwordhash = hasher.HashPassword(entity, userUpdate.Password);
            await _userRepository.UpdateAsync(entity);
            return _mapper.Map<UserGetDto>(entity);
        }

        public async Task UserCreateExcelFileAsync(List<UserGetDto> persons)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Sheet1");

                // Sarlavhalarni yozish
                worksheet.Cells[1, 1].Value = "ID";
                worksheet.Cells[1, 2].Value = "UserName";
                worksheet.Cells[1, 3].Value = "Phone";
                worksheet.Cells[1, 4].Value = "Is Active";

                // Ma'lumotlarni yozish
                for (int i = 0; i < persons.Count; i++)
                {
                    worksheet.Cells[i + 2, 1].Value = persons[i].Id;
                    worksheet.Cells[i + 2, 2].Value = persons[i].Username;
                    worksheet.Cells[i + 2, 3].Value = persons[i].Phone;
                    worksheet.Cells[i + 2, 4].Value = persons[i].Isactive;
                }

                // Excel faylini saqlash
                var fileInfo = new FileInfo("D:\\hp.xlsx");
                await package.SaveAsAsync(fileInfo);
            }
        }
    }
}
