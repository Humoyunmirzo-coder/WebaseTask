using Aplication.Options;
using Domen.AutoGenerated;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Options;

namespace Aplication.Services.Token
{
    public class JwtTokenService : IJwtTokenService
    {
        private readonly JwtOption _jwtOptions;
        private readonly IConfiguration _config;

        public JwtTokenService(IOptions<JwtOption> jwtOptions, IConfiguration configuration)
        {
            _jwtOptions = jwtOptions.Value;
            _config = configuration;
        }

        public string GenerateToken(User user)
        {
            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new Claim(ClaimTypes.Name, user.Username)
            };

            var signingKey = Encoding.UTF32.GetBytes(_jwtOptions.SigningKey);
            var security = new JwtSecurityToken(
                issuer: _jwtOptions.ValidIssuer,
                audience: _jwtOptions.ValidAudience,
                claims: claims,
                expires: DateTime.Now.AddHours(_jwtOptions.ExpiresInHours),
                signingCredentials: new SigningCredentials(new SymmetricSecurityKey(signingKey), SecurityAlgorithms.HmacSha256));

            var token = new JwtSecurityTokenHandler().WriteToken(security);
            return token;
        }
    }
}
