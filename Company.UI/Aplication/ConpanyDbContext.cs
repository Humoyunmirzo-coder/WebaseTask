using Task = Domen.AutoGenerated.Task;
using System.Collections.Generic;
using Domen.AutoGenerated;
using Microsoft.EntityFrameworkCore;

namespace Aplication;

public partial class ConpanyDbContext : DbContext
{
    public ConpanyDbContext()
    {
    }

    public ConpanyDbContext(DbContextOptions<ConpanyDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Assignee> Assignees { get; set; }

    public virtual DbSet<AssigneeEt> AssigneeEts { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeLevel> EmployeeLevels { get; set; }

    public virtual DbSet<EnumImportanceLevel> EnumImportanceLevels { get; set; }

    public virtual DbSet<EnumProjectType> EnumProjectTypes { get; set; }

    public virtual DbSet<EnumStatus> EnumStatuses { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Userrole> Userroles { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Server=localhost;Database=ConpanyDB;Username=postgres;Password=2244;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Assignee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("assignee_pkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.Assignees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("assignee_employee_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.Assignees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("assignee_project_id_fkey");
        });

        modelBuilder.Entity<AssigneeEt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("assignee_et_pkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.AssigneeEts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("assignee_et_employee_id_fkey");

            entity.HasOne(d => d.Task).WithMany(p => p.AssigneeEts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("assignee_et_task_id_fkey");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("employee_pkey");

            entity.HasOne(d => d.EmployeeLevelNavigation).WithMany(p => p.Employees).HasConstraintName("employee_employee_level_fkey");

            entity.HasOne(d => d.Organization).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("employee_organization_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Employees).HasConstraintName("employee_user_id_fkey");
        });

        modelBuilder.Entity<EmployeeLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("employee_level_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<EnumImportanceLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("enum_importance_level_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<EnumProjectType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("enum_project_type_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<EnumStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("enum_status_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("organization_pkey");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_pkey");


            entity.HasOne(d => d.Organization).WithMany(p => p.Projects)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("project_organizationid_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.Projects).HasConstraintName("project_ownerid_fkey");

            entity.HasOne(d => d.ProjectType).WithMany(p => p.Projects).HasConstraintName("project_project_type_id_fkey");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("role_pkey");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("CURRENT_TIMESTAMP");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("task_pkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.Tasks)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("task_employee_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.Tasks)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("task_project_id_fkey");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("User_pkey");

            entity.Property(e => e.Createdat).HasDefaultValueSql("CURRENT_TIMESTAMP");
            entity.Property(e => e.Isactive).HasDefaultValue(true);
        });

        modelBuilder.Entity<Userrole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("userrole_pkey");

            entity.HasOne(d => d.Role).WithMany(p => p.Userroles)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("userrole_role_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Userroles)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("userrole_user_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

