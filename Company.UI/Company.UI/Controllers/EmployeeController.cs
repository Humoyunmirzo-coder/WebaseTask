using Aplication.Services;
using Domen.AutoGenerated;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Company.UI.Controllers
{
    [Route("/[controller]/[action]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {
        private readonly ICompanyService _companyService;

        public EmployeeController(ICompanyService companyService)
        {
            _companyService = companyService;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Employee>>> GetAllEmployees()
        {
            var employees = await _companyService.GetAllEmployeeAynce();
            return Ok(employees);
        }

        
        [HttpGet("{id}")]
        public async Task<ActionResult<Employee>> GetByIdEmployee(int id)
        {
            var employee = await _companyService.GetByIdEmployee(id);
            if (employee == null)
            {
                return NotFound();
            }
            return Ok(employee);
        }

       
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateEmployee(int id, Employee employee)
        {
            if (id != employee.Id)
            {
                return BadRequest();
            }
            await _companyService.UpdateEmployeeAynce(employee);
            return NoContent();
        }

        [HttpPost]
        public async Task<ActionResult<Employee>> CreateEmployee(Employee employee)
        {
            await _companyService.CreateEmployeeAynce(employee);
            return CreatedAtAction(nameof(GetByIdEmployee), new { id = employee.Id }, employee);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEmployee(int id)
        {
            var success = await _companyService.DeleteEmployeeAynce(id);
            if (!success)
            {
                return NotFound();
            }
            return NoContent();
        }
    }
}
