using Aplication.Services.OrganizationServices;
using Domen.AutoGenerated;
using Domen.EmtityDTO.OrganizationDto;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Company.UI.Controllers
{
   
    [ApiController]
    [Route("api / [action]")]
    public class OganizationController : ControllerBase
    {
        private readonly IOrganizationService _organizationService;
        private readonly Logger < Organization> _logger;

        public OganizationController(IOrganizationService organizationService)
        {
            _organizationService = organizationService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAllOrganization()
        {
            List<OrganizationGetDto> organization = await _organizationService.GetAllOrganizationAsync();
            return Ok(organization);
        }

        [HttpGet("{id}")]        
        public async Task<IActionResult> GetByIdOrganization(int id)
        {
            try
            {
                var organization = await _organizationService.GetByIdOrganizationAsync(id);
                if (organization == null)
                {
                    return NotFound();  
                }
                return Ok(organization);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while retrieving organization by ID: {Id}", id);
                return StatusCode(500, "Internal Server Error");
            }
        }

        [HttpPost]
        public async Task<IActionResult> CreateOrganization([FromBody] OrganizationCreateDto organizationCreateDto)
        {
            if (organizationCreateDto == null)
            {
                return BadRequest("Organization data must be provided.");
            }

            try
            {
                var organization = await _organizationService.CreateOrganizationAsync(organizationCreateDto);

                if (organization == null)
                {
                    return StatusCode(500, "An error occurred while creating the organization.");
                }

                return CreatedAtAction(nameof(GetByIdOrganization), new { id = organization.Id }, organization);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred: {ex.Message}");
            }
        }


        [HttpPut]

        public async Task<ActionResult<OrganizationGetDto>> UpdateOrganization([FromBody] OrganizationUpdateDto organizationUpdate)
        {
            try
            {
                if (organizationUpdate == null)
                {
                    return BadRequest("organizationUpdate data must be provided.");
                }
                var updatedUser = await _organizationService.UpdateOrganizationAsync(organizationUpdate);
                if (updatedUser == null)
                {
                    return NotFound($"Organization with ID {organizationUpdate.Id} not found.");
                }
                return Ok(updatedUser);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }


        [HttpDelete("{id:int}")]
        public async Task<IActionResult> DeleteEmployee(int id)
        {
            if (id <= 0)
            {
                return BadRequest("Invalid ID supplied.");
            }
            try
            {
                var result = await _organizationService.DeleteOrganizationAsync(id);
                if (result)
                {
                    return Ok($"Employee with ID {id} deleted successfully.");
                }
                else
                {
                    return NotFound($"Employee with ID {id} not found.");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
        [HttpGet("export")]
        public async Task<IActionResult> AllOrganizationExportToExcel()
        {
            var persons = await _organizationService.GetAllOrganizationAsync();
            await _organizationService.OrganizationCreateExcelFileAsync(persons);
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "D:\\hp.xlsx");

            byte[] fileBytes = await System.IO.File.ReadAllBytesAsync(filePath);
            return File(fileBytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "D:\\hp.xlsx");
        }

    }
}
