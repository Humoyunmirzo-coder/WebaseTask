using Aplication.Services;
using Task = Domen.AutoGenerated.Task;
using Domen.EmtityDTO.TaskDto;
using Infrastructure.Servises;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using AutoMapper;

namespace Company.UI.Controllers
{
    [Route("[controller]/[action]")]
    [ApiController]
    public class TasklController : ControllerBase
    {
         private readonly ITaskService _taskService;

        public TasklController(ITaskService taskService)
        {
            _taskService = taskService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAllTask()
        {
            List<TaskGetDto> task = await _taskService.GetAllTaskAynce();
            return Ok(task);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetByIdTask (int id)
        {
            var task = await _taskService.GetByIdTaskAynce(id);
            return Ok(task);
        }
        [HttpPost]
        public async Task<TaskGetDto> CreateUser(TaskCreateDto  taskCreateDto)
        {
            var task = await _taskService.CreateTaskAynce(taskCreateDto);
            return task;
        }
        [HttpPut]
        public async Task<ActionResult<TaskGetDto>> UpdateTask([FromBody] TaskUpdateDto  taskUpdateDto)
        {
            try
            {
                if (taskUpdateDto == null)
                {
                    return BadRequest("Task data must be provided.");
                }
                var updatedtask = await _taskService.UpdateTaskAynce(taskUpdateDto);
                if (updatedtask == null)
                {
                    return NotFound($"User with ID {taskUpdateDto.Id} not found.");
                }
                return Ok(updatedtask);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpDelete]
        public async Task<bool> DeleteTask(int Id)
        {
            if (Id != 0)
            {
                return await _taskService.DeleteTaskAynce(Id);
            }
            return false;

        }

    }
}
